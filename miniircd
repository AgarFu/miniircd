#! /usr/bin/env python
# Hey, Emacs! This is -*-python-*-.
#
# Copyright (C) 2003, 2011 Joel Rosdahl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
# Joel Rosdahl <joel@rosdahl.net>

version = "0.2.0"

import getopt
import os
import select
import socket
import string
import sys
import re
import time

class Channel(object):
    def __init__(self, server, name):
        self.server = server
        self.name = name
        self.members = set()
        self.topic = ""
        self.__operators = set()
        self.__voiced = set()

    def add_member(self, client):
        self.members.add(client)

    def remove_client(self, client):
        for x in [self.members, self.__operators, self.__voiced]:
            x.discard(client)
        if len(self.members) == 0:
            self.server.remove_channel(self)

class Client(object):
    __linesep_regexp = re.compile("\r?\n")
    # The RFC limit for nicknames is 9 characters, but what the heck.
    __valid_nickname_regexp = re.compile(
        "^[][\`_^{|}A-Za-z][][\`_^{|}A-Za-z0-9]{0,50}$")
    __valid_channelname_regexp = re.compile(
        "^[&#+!][^\x00\x07\x0a\x0d ,:]{0,50}$")

    def __init__(self, server, socket):
        self.server = server
        self.socket = socket
        self.channels = {} # irc_lower(Channel name) --> Channel
        self.nickname = None
        self.user = None
        self.realname = None
        self.host, self.port = socket.getpeername()
        self.__timestamp = time.time()
        self.__readbuffer = ""
        self.__writebuffer = ""
        self.__sent_ping = False
        if self.server.password:
            self.__handle_command = self.__pass_handler
        else:
            self.__handle_command = self.__registration_handler

    def get_prefix(self):
        return "%s!%s@%s" % (self.nickname, self.user, self.host)
    prefix = property(get_prefix)

    def check_aliveness(self):
        now = time.time()
        if self.__timestamp + 180 < now:
            self.disconnect("ping timeout")
            return
        if not self.__sent_ping and self.__timestamp + 90 < now:
            if self.__handle_command == self.__command_handler:
                # Registered.
                self.message("PING :%s" % self.server.name)
                self.__sent_ping = True
            else:
                # Not registered.
                self.disconnect("ping timeout")

    def write_queue_size(self):
        return len(self.__writebuffer)

    def __parse_read_buffer(self):
        lines = self.__linesep_regexp.split(self.__readbuffer)
        self.__readbuffer = lines[-1]
        lines = lines[:-1]
        for line in lines:
            if not line:
                # Empty line. Ignore.
                continue
            x = line.split(" ", 1)
            command = x[0].upper()
            if len(x) == 1:
                arguments = []
            else:
                if len(x[1]) > 0 and x[1][0] == ":":
                    arguments = [x[1][1:]]
                else:
                    y = string.split(x[1], " :", 1)
                    arguments = string.split(y[0])
                    if len(y) == 2:
                        arguments.append(y[1])
            self.__handle_command(command, arguments)

    def __pass_handler(self, command, arguments):
        server = self.server
        if command == "PASS":
            if len(arguments) == 0:
                self.message(
                    ":%s 461 * PASS :Not enough parameters" % server.name)
            else:
                if arguments[0].lower() == server.password:
                    self.__handle_command = self.__registration_handler
                else:
                    self.message(
                        ":%s 464 :Password incorrect" % server.name)
        elif command == "QUIT":
            self.disconnect("Client quit")
            return
        else:
            pass

    def __registration_handler(self, command, arguments):
        server = self.server
        if command == "NICK":
            if len(arguments) < 1:
                self.message(
                    ":%s 431 :No nickname given" % server.name)
                return

            nick = arguments[0]
            if server.get_client(nick):
                self.message(
                    ":%s 433 * %s :Nickname is already in use" % (
                        server.name,
                        nick))
            elif not self.__valid_nickname_regexp.match(nick):
                self.message(
                    ":%s 432 * %s :Erroneous Nickname" % (
                        server.name,
                        nick))
            else:
                self.nickname = nick
                server.client_changed_nickname(self, None)
        elif command == "USER":
            if len(arguments) < 4:
                self.message(
                    ":%s 461 * USER :Not enough parameters" % server.name)
                return

            self.user = arguments[0]
            self.realname = arguments[3]
        elif command == "QUIT":
            self.disconnect("Client quit")
            return
        else:
            pass
        if self.nickname and self.user:
            self.message(":%s 001 %s :Yo, welcome to IRC" % (
                server.name,
                self.nickname))
            self.message(
                ":%s 002 %s :Your host is %s, running version miniircd-%s" % (
                    server.name,
                    self.nickname,
                    server.name,
                    version))
            self.message(
                ":%s 003 %s :This server was created sometime" % (
                    server.name,
                    self.nickname))
            self.message(
                ":%s 004 %s :%s miniircd-%s o o" % (
                    server.name,
                    self.nickname,
                    server.name,
                    version))
            self.message(
                ":%s 251 %s :There are %d users and 0 services on 1 servers" % (
                    server.name,
                    self.nickname,
                    len(server.clients)))
            self.send_motd()
            self.__handle_command = self.__command_handler

    def __command_handler(self, command, arguments):
        def away_handler():
            pass

        def join_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 461 %s JOIN :Not enough parameters" % (
                        server.name,
                        self.nickname))
                return

            if arguments[0] == "0":
                for channelname, channel in self.channels.items():
                    self.message_channel(
                        channel,
                        ":%s PART %s" % (self.prefix, channelname),
                        True)
                    server.remove_member_from_channel(self, channelname)
                self.channels = {}
            else:
                for channelname in arguments[0].split(","):
                    if irc_lower(arguments[0]) in self.channels:
                        pass
                    elif not valid_channel_re.match(channelname):
                        self.message(
                            ":%s 403 %s %s :No such channel" % (
                                server.name,
                                self.nickname,
                                channelname))
                    else:
                        server.add_member_to_channel(self, channelname)
                        channel = server.get_channel(channelname)
                        self.channels[irc_lower(channelname)] = channel
                        self.message_channel(
                            channel,
                            ":%s JOIN %s" % (self.prefix, channelname),
                            True)
                        if channel.topic:
                            self.message(
                                ":%s 332 %s %s :%s" % (
                                    server.name,
                                    self.nickname,
                                    channel.name,
                                    channel.topic))
                        else:
                            self.message(
                                ":%s 331 %s %s :No topic is set" % (
                                    server.name,
                                    self.nickname,
                                    channel.name))
                        self.message(
                            ":%s 353 %s = %s :%s" % (
                                server.name,
                                self.nickname,
                                channelname,
                                " ".join([x.nickname
                                          for x in channel.members])))
                        self.message(
                            ":%s 366 %s %s :End of NAMES list" % (
                                server.name,
                                self.nickname,
                                channelname))

        def list_handler():
            if len(arguments) < 1:
                channels = server.channels.values()
            else:
                channels = []
                for channelname in arguments[0].split(","):
                    channel = server.get_channel(channelname)
                    if channel:
                        channels.append(channel)
            for channel in channels:
                self.message(
                    ":%s 322 %s %s %d :%s" % (
                        server.name,
                        self.nickname,
                        channel.name,
                        len(channel.members),
                        channel.topic))
            self.message(
                ":%s 323 %s :End of LIST" % (server.name, self.nickname))

        def mode_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 461 %s MODE :Not enough parameters" % (
                        server.name,
                        self.nickname))
                return

            targetname = arguments[0]
            channel = server.get_channel(targetname)
            if channel:
                if len(arguments) > 1:
                    modes = arguments[1]
                    self.message(":%s 472 %s %s :Unknown MODE flag" % (
                        server.name,
                        self.nickname,
                        modes))
                else:
                    self.message(":%s 324 %s %s +" % (
                        server.name,
                        self.nickname,
                        targetname))
            else:
                if targetname == self.nickname:
                    if len(arguments) == 1:
                        self.message(
                            ":%s 221 %s +" % (server.name, self.nickname))
                    else:
                        self.message(
                            ":%s 501 %s :Unknown MODE flag" % (
                                 server.name,
                                 self.nickname))
                else:
                    self.message(
                        ":%s 403 %s %s :That channel doesn't exist" % (
                            server.name,
                            self.nickname,
                            targetname))

        def motd_handler():
            self.send_motd()

        def nick_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 431 :No nickname given" % server.name)
                return

            newnick = arguments[0]
            client = server.get_client(newnick)
            if newnick == self.nickname:
                pass
            elif client and client is not self:
                self.message(
                    ":%s 433 %s %s :Nickname is already in use" % (
                        server.name,
                        self.nickname,
                        newnick))
            elif not self.__valid_nickname_regexp.match(newnick):
                self.message(
                    ":%s 432 %s %s :Erroneous Nickname" % (
                        server.name,
                        self.nickname,
                        newnick))
            else:
                oldnickname = self.nickname
                self.nickname = newnick
                server.client_changed_nickname(self, oldnickname)
                self.message_related(
                    ":%s!%s@%s NICK %s" % (
                        oldnickname,
                        self.user,
                        self.host,
                        self.nickname),

                    True)

        def notice_and_privmsg_handler():
            if len(arguments) == 0:
                self.message(":%s 411 %s :No recipient given" % (
                    server.name,
                    self.nickname))
                return
            elif len(arguments) == 1:
                self.message(":%s 412 %s :No text to send" % (
                    server.name,
                    self.nickname))
                return

            targetname = arguments[0]
            message = arguments[1]
            client = server.get_client(targetname)
            if client:
                client.message(":%s %s %s :%s" % (
                    self.prefix,
                    command,
                    targetname,
                    message))
            else:
                channel = server.get_channel(targetname)
                if channel:
                    self.message_channel(
                        channel,
                        ":%s %s %s :%s" % (
                            self.prefix,
                            command,
                            channel.name,
                            message))
                else:
                    self.message(
                        ":%s 401 %s %s :No such nick/channel" % (
                            server.name,
                            self.nickname,
                            targetname))

        def part_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 461 %s PART :Not enough parameters" % (
                        server.name,
                        self.nickname))
                return

            if len(arguments) > 1:
                partmsg = arguments[1]
            else:
                partmsg = self.nickname
            for channelname in arguments[0].split(","):
                if not valid_channel_re.match(channelname):
                    self.message(
                        ":%s 403 %s %s :No such channel" % (
                            server.name,
                            self.nickname,
                            channelname))
                elif not irc_lower(channelname) in self.channels:
                    self.message(
                        ":%s 442 %s %s :You're not on that channel" % (
                            server.name,
                            self.nickname,
                            channelname))
                else:
                    channel = self.channels[irc_lower(channelname)]
                    self.message_channel(
                        channel,
                        ":%s PART %s :%s" % (
                            self.prefix,
                            channelname,
                            partmsg),
                        True)
                    del self.channels[irc_lower(channelname)]
                    server.remove_member_from_channel(self, channelname)

        def ping_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 409 %s :No origin specified" % (
                        server.name,
                        self.nickname))
                return

            self.message(
                ":%s PONG %s :%s" % (
                    server.name,
                    server.name,
                    arguments[0]))

        def pong_handler():
            pass

        def quit_handler():
            if len(arguments) < 1:
                quitmsg = self.nickname
            else:
                quitmsg = arguments[0]
            self.disconnect(quitmsg)

        def topic_handler():
            if len(arguments) < 1:
                self.message(
                    ":%s 461 %s TOPIC :Not enough parameters" % (
                        server.name,
                        self.nickname))
                return

            channelname = arguments[0]
            if channelname in self.channels:
                channel = server.get_channel(channelname)
                if len(arguments) > 1:
                    newtopic = arguments[1]
                    channel.topic = newtopic
                    self.message_channel(
                        channel,
                        ":%s TOPIC %s :%s" % (
                            self.prefix,
                            channelname,
                            newtopic),
                        True)
                else:
                    if channel.topic:
                        self.message(
                            ":%s 332 %s %s :%s" % (
                                server.name,
                                self.nickname,
                                channel.name,
                                channel.topic))
                    else:
                        self.message(
                            ":%s 331 %s %s :No topic is set" % (
                                server.name,
                                self.nickname,
                                channel.name))
            else:
                self.message(
                    ":%s 442 %s :You're not on that channel" % (
                        server.name,
                        channelname))

        def who_handler():
            if len(arguments) < 1:
                return

            targetname = arguments[0]
            channel = server.get_channel(targetname)
            if channel:
                for member in channel.members:
                    self.message(
                        ":%s 352 %s %s %s %s %s %s H :0 %s" % (
                            server.name,
                            self.nickname,
                            targetname,
                            member.user,
                            member.host,
                            server.name,
                            member.nickname,
                            member.realname))
                self.message(
                    ":%s 315 %s %s :End of WHO list" % (
                        server.name,
                        self.nickname,
                        targetname))

        def whois_handler():
            if len(arguments) < 1:
                return

            username = arguments[0]
            user = server.get_client(username)
            if user:
                self.message(
                     ":%s 311 %s %s %s %s * :%s" % (
                        server.name,
                        self.nickname,
                        user.nickname,
                        user.user,
                        user.host,
                        user.realname))
                self.message(
                    ":%s 312 %s %s %s :%s" % (
                        server.name,
                        self.nickname,
                        user.nickname,
                        server.name,
                        server.name))
                self.message(
                    ":%s 319 %s %s :%s" % (
                    server.name,
                    self.nickname,
                    user.nickname,
                    " ".join(user.channels)))
                self.message(
                    ":%s 318 %s %s :End of WHOIS list" % (
                        server.name,
                        self.nickname,
                        user.nickname))
            else:
                self.message(
                    ":%s 401 %s %s :No such nick" % (
                        server.name,
                        self.nickname,
                        username))

        handler_table = {
            "AWAY": away_handler,
            "JOIN": join_handler,
            "LIST": list_handler,
            "MODE": mode_handler,
            "MOTD": motd_handler,
            "NICK": nick_handler,
            "NOTICE": notice_and_privmsg_handler,
            "PART": part_handler,
            "PING": ping_handler,
            "PONG": pong_handler,
            "PRIVMSG": notice_and_privmsg_handler,
            "QUIT": quit_handler,
            "TOPIC": topic_handler,
            "WHO": who_handler,
            "WHOIS": whois_handler,
        }
        server = self.server
        valid_channel_re = self.__valid_channelname_regexp
        try:
            handler_table[command]()
        except KeyError:
            self.message(":%s 421 %s %s :Unknown command" % (
                server.name,
                self.nickname,
                command))

    def socket_readable_notification(self):
        try:
            data = self.socket.recv(2**10)
            self.server.print_debug(
                "[%s:%d] -> %r" % (self.host, self.port, data))
            quitmsg = "EOT"
        except socket.error, x:
            data = ""
            quitmsg = x
        if len(data) == 0:
            self.disconnect(quitmsg)
        else:
            self.__readbuffer += data
            self.__parse_read_buffer()
            self.__timestamp = time.time()
            self.__sent_ping = False

    def socket_writable_notification(self):
        try:
            sent = self.socket.send(self.__writebuffer)
            self.server.print_debug(
                "[%s:%d] <- %r" % (
                    self.host, self.port, self.__writebuffer[:sent]))
            self.__writebuffer = self.__writebuffer[sent:]
        except socket.error, x:
            self.disconnect(x)

    def disconnect(self, quitmsg):
        self.message("ERROR :%s" % quitmsg)
        self.server.print_info(
            "Disconnected connection from %s:%s (%s)." % (
                self.host, self.port, quitmsg))
        self.socket.close()
        self.server.remove_client(self, quitmsg)

    def message(self, msg):
        self.__writebuffer += msg + "\r\n"

    def message_channel(self, channel, line, include_self=False):
        for client in channel.members:
            if client != self or include_self:
                client.message(line)

    def message_related(self, msg, include_self=False):
        clients = set()
        if include_self:
            clients.add(self)
        for channel in self.channels.values():
            clients |= channel.members
        if not include_self:
            clients.discard(self)
        for client in clients:
            client.message(msg)

    def send_motd(self):
        server = self.server
        motdlines = server.get_motd_lines()
        if motdlines:
            self.message(
                ":%s 375 %s :- %s Message of the day -" % (
                    server.name,
                    self.nickname,
                    server.name))
            for line in motdlines:
                self.message(
                    ":%s 372 %s :- %s" % (
                        server.name,
                        self.nickname,
                        line.rstrip()))
            self.message(
                ":%s 376 %s :End of /MOTD command" % (
                server.name,
                self.nickname))

class Server(object):
    def __init__(self, ports, password, motdfile, verbose, debug):
        self.ports = ports
        self.password = password
        self.motdfile = motdfile
        self.verbose = verbose
        self.debug = debug
        self.name = socket.getfqdn()[:63] # Server name limit from the RFC.
        self.channels = {} # irc_lower(Channel name) --> Channel instance.
        self.clients = {}  # Socket --> Client instance.
        self.nicknames = {} # irc_lower(Nickname) --> Client instance.

    def daemonize(self):
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError:
            sys.exit(1)
        os.setsid()
        try:
            pid = os.fork()
            if pid > 0:
                self.print_info("PID: %d" % pid)
                sys.exit(0)
        except OSError:
            sys.exit(1)
        os.chdir("/")
        os.umask(0)
        dev_null = file("/dev/null", "r+")
        os.dup2(dev_null.fileno(), sys.stdout.fileno())
        os.dup2(dev_null.fileno(), sys.stderr.fileno())
        os.dup2(dev_null.fileno(), sys.stdin.fileno())

    def get_client(self, nickname):
        return self.nicknames.get(irc_lower(nickname))

    def get_channel(self, channelname):
        return self.channels.get(irc_lower(channelname))

    def get_motd_lines(self):
        if self.motdfile:
            try:
                f = file(self.motdfile)
                return f.readlines()
            except IOError:
                return ["Could not read MOTD file %s." % self.motdfile]
        else:
            return []

    def print_info(self, msg):
        if self.verbose:
            print msg

    def print_debug(self, msg):
        if self.debug:
            print msg

    def print_error(self, msg):
        print >>sys.stderr, msg

    def client_changed_nickname(self, client, oldnickname):
        if oldnickname:
            del self.nicknames[irc_lower(oldnickname)]
        self.nicknames[irc_lower(client.nickname)] = client

    def add_member_to_channel(self, client, channelname):
        if self.channels.has_key(irc_lower(channelname)):
            channel = self.channels[irc_lower(channelname)]
        else:
            channel = Channel(self, channelname)
            self.channels[irc_lower(channelname)] = channel
        channel.add_member(client)

    def remove_member_from_channel(self, client, channelname):
        if self.channels.has_key(irc_lower(channelname)):
            channel = self.channels[irc_lower(channelname)]
            channel.remove_client(client)

    def remove_client(self, client, quitmsg):
        client.message_related(":%s QUIT :%s" % (client.prefix, quitmsg))
        for chan in client.channels.values():
            chan.remove_client(client)
        if client.nickname \
               and self.nicknames.has_key(irc_lower(client.nickname)):
            del self.nicknames[irc_lower(client.nickname)]
        del self.clients[client.socket]

    def remove_channel(self, channel):
        del self.channels[irc_lower(channel.name)]

    def start(self):
        serversockets = []
        for port in self.ports:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            try:
                s.bind(("", port))
            except socket.error, x:
                self.print_error("Could not bind port %s: %s." % (port, x))
                sys.exit(1)
            s.listen(5)
            serversockets.append(s)
            del s
            self.print_info("Listening on port %d." % port)

        last_aliveness_check = time.time()
        while True:
            iwtd, owtd, ewtd = select.select(
                serversockets + [x.socket for x in self.clients.values()],
                [x.socket for x in self.clients.values()
                          if x.write_queue_size() > 0],
                [],
                10)
            for x in iwtd:
                if x in self.clients:
                    self.clients[x].socket_readable_notification()
                else:
                    conn, addr = x.accept()
                    self.clients[conn] = Client(self, conn)
                    self.print_info("Accepted connection from %s:%s." % (
                        addr[0], addr[1]))
            for x in owtd:
                self.clients[x].socket_writable_notification()
            now = time.time()
            if last_aliveness_check + 10 < now:
                for client in self.clients.values():
                    client.check_aliveness()
                last_aliveness_check = now

_alpha = "abcdefghijklmnopqrstuvwxyz"
_special = "-[]\\`^{}"
nick_characters = _alpha + _alpha.upper() + string.digits + _special
_ircstring_translation = string.maketrans(
    string.upper(_alpha) + "[]\\^",
    _alpha + "{}|~")

def irc_lower(s):
    return string.translate(s, _ircstring_translation)

######################################################################

def display_usage():
    print "Usage: miniircd [arguments]"
    print
    print "miniircd is a small and limited IRC server."
    print
    print "Arguments:"
    print
    print "    -d, --daemon         Fork and become a daemon."
    print "        --debug          Print debug messages to stdout."
    print "    -h, --help           Show this help text."
    print "        --motd X         Display file X as message of the day."
    print "    -p, --password X     Require connection password X. Default: no password."
    print "        --ports X        Listen to ports X (a list separated by comma or"
    print "                         whitespace). Default: 6667."
    print "    -v, --verbose        Be verbose (print some progress messages on stdout)."

def main(argv):
    try:
        optlist, arguments = getopt.getopt(
            argv[1:],
            "dhp:v",
            ["daemon",
             "debug",
             "help",
             "motd=",
             "password=",
             "ports=",
             "verbose"])
    except getopt.error, x:
        sys.stderr.write("Bad arguments: %s.\n" % x)
        sys.exit(17)
    motd = None
    password = None
    ports = [6667]
    verbose = False
    daemon = False
    debug = False
    for opt, val in optlist:
        if opt in ("-d", "--daemon"):
            daemon = True
        elif opt == "--debug":
            debug = True
            verbose = True
        elif opt in ("-h", "--help"):
            display_usage()
            sys.exit(0)
        elif opt == "--motd":
            motd = val
        elif opt in ("-p", "--password"):
            password = val.lower()
        elif opt == "--ports":
            ports = []
            for port in re.split("[,\s]+", val):
                try:
                    ports.append(int(port))
                except ValueError:
                    sys.stderr.write("Bad port: \"%s\".\n" % port)
                    sys.exit(1)
        elif opt in ("-v", "--verbose"):
            verbose = True
    server = Server(ports, password, motd, verbose, debug)
    if daemon:
        server.daemonize()
    try:
        server.start()
    except KeyboardInterrupt:
        server.print_error("Interrupted.")

main(sys.argv)
